
server.port=8081
spring.datasource.url=jdbc:mysql://localhost:3306/ballbyballdb
spring.datasource.username=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


mysql> show global variables like 'local_infile';
mysql> set global local_infile=true;
mysql> exit
  Bye
mysql> mysql --local-infile=1 -u root -p

Now, you can execute LOAD DATA query.

CREATE TABLE balls (
id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
match_id VARCHAR(10),
season VARCHAR(15),
start_date VARCHAR(15),
venue VARCHAR(35),
innings VARCHAR(25),
ball VARCHAR(25),
batting_team VARCHAR(35),
bowling_team VARCHAR(35),
striker VARCHAR(15),
non_striker VARCHAR(15),
bowler VARCHAR(15),
runs_off_bat VARCHAR(15),
extras VARCHAR(15),
wides VARCHAR(15),
noballs VARCHAR(15),
byes VARCHAR(15),
legbyes VARCHAR(15),
penalty VARCHAR(15),
wicket_type VARCHAR(15),
player_dismissed VARCHAR(15),
other_wicket_type VARCHAR(15),
other_player_dismissed VARCHAR(15)
);

match_id	season	start_date	venue	innings	ball	batting_team	bowling_team	striker	non_striker	bowler	runs_off_bat	extras	wides	noballs	byes	legbyes	penalty	wicket_type	player_dismissed	other_wicket_type	other_player_dismissed



LOAD DATA LOCAL INFILE "C:/DDrive/Projects/ipl-2023/new_data.csv" INTO TABLE ballbyballdb.balls
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES
(match_id,
	season,
	start_date,
	venue,	innings,	ball,	batting_team,	bowling_team,	striker,	non_striker,	bowler,	runs_off_bat,	extras,	wides,	noballs,	byes,	legbyes,	penalty,	wicket_type,	player_dismissed,	other_wicket_type,	other_player_dismissed );


package com.jdbctemp.ipl.dao;

import com.jdbctemp.ipl.payload.PlayerRequest;

import java.util.List;

public interface Dao<T> {

    List<T> getPlayerList(PlayerRequest playerRequest);
}

package com.jdbctemp.ipl.payload;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

@AllArgsConstructor
@Getter
@Setter
public class PlayerRequest {

    @NotEmpty(message = "Player 1 cannot be empty, Please enter something")
    private String player1;
    private String player2;
    private String team;
    private String venue;

}


package com.jdbctemp.ipl.dao;

import com.jdbctemp.ipl.model.BatsmanModel;
import com.jdbctemp.ipl.payload.PlayerRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;

@Repository
public class BatsmanDao implements Dao<BatsmanModel> {

    private final String SQLFIRSTPART = "select striker, ANY_VALUE(batting_team) as batting_team, ANY_VALUE(bowling_team) as bowling_team, sum(runs_off_bat) as runs_off_bat, \n" +
            "(count(ball) - COUNT(NULLIF(TRIM(wides), ''))) as Ball, ANY_VALUE(bowler) as Bowler, ANY_VALUE(season) as Season, ANY_VALUE(start_date) as start_date, \n" +
            "ANY_VALUE(venue) as Venue, count(if(player_dismissed = striker, striker, NULL)) as Wickets \n" +
            "from balls \n" +
            "where striker=? ";

    private final String SQLLASTPART = "group by match_id order by ANY_VALUE(start_date) DESC";

    private final String SQLTEAM = "AND bowling_team=? ";

    private final String SQLVENUE = "AND venue=? ";

    private final String SQLBOWLER = "AND bowler=? ";

    @Autowired
    private final JdbcTemplate jdbcTemplate;

    public BatsmanDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public List<BatsmanModel> getPlayerList(PlayerRequest playerRequest) {

        RowMapper<BatsmanModel> rowMapper = (rs, rowNum) -> {
            BatsmanModel bm = new BatsmanModel();
            bm.setStriker(rs.getString("striker"));
            bm.setBattingTeam(rs.getString("batting_team"));
            bm.setBowlingTeam(rs.getString("bowling_team"));
            bm.setRunsOffBat(rs.getString("runs_off_bat"));
            bm.setBall(rs.getString("ball"));
            bm.setSeason(rs.getString("season"));
            if (!playerRequest.getPlayer2().isEmpty())
                bm.setBowler(rs.getString("bowler"));
            bm.setStart_date(rs.getString("start_date"));
            bm.setVenue((rs.getString("venue")));
            bm.setWickets(rs.getString("wickets"));


            return bm;
        };

        List<String> queryArgs = new ArrayList<>();
        String finalSQl = "";

        queryArgs.add(playerRequest.getPlayer1());

        if (!playerRequest.getTeam().isEmpty()) {
            finalSQl = SQLTEAM;
            queryArgs.add(playerRequest.getTeam());
        }

        if (!playerRequest.getVenue().isEmpty()) {
            finalSQl += SQLVENUE;
            queryArgs.add(playerRequest.getVenue());
        }

        if (!playerRequest.getPlayer2().isEmpty()) {
            finalSQl += SQLBOWLER;
            queryArgs.add(playerRequest.getPlayer2());
        }

        /* this is the part I used from the above stackoverflow question */
        Object[] preparedStatementArgs = new Object[queryArgs.size()];
        for (int i = 0; i < preparedStatementArgs.length; i++) {
            preparedStatementArgs[i] = queryArgs.get(i);
            System.out.println("prepare: " + preparedStatementArgs[i]);
            System.out.println("queruarhs: " + queryArgs.get(i));
        }

        finalSQl = SQLFIRSTPART + finalSQl + SQLLASTPART;

        return jdbcTemplate.query(finalSQl, preparedStatementArgs, rowMapper);
//        return jdbcTemplate.query(sql, rowMapper);
    }
}



import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class BatsmanModel {

//    private int id;

//    private String match_id;
    private String season;
    private String start_date;
    private String venue;
//    private String innings;
    private String ball;
    private String battingTeam;
    private String bowlingTeam;
    private String striker;
//    private String non_striker;
    private String bowler;
    private String runsOffBat;
//    private String extras;
//    private String wides;
//    private String noballs;
//    private String byes;
//    private String legbyes;
//    private String penalty;
//    private String wicket_type;
//    private String player_dismissed;
//    private String other_wicket_type;
//    private String other_player_dismissed;

    private String wickets;
//    @Transient
//    private int strike_rate;

}


import com.jdbctemp.ipl.model.BatsmanModel;
import com.jdbctemp.ipl.payload.PlayerRequest;

import java.util.List;

public interface BatsmanService {

     List<BatsmanModel> getPlayerList(PlayerRequest playerRequest);

}



import com.jdbctemp.ipl.dao.BatsmanDao;
import com.jdbctemp.ipl.dao.Dao;
import com.jdbctemp.ipl.model.BatsmanModel;
import com.jdbctemp.ipl.payload.PlayerRequest;
import com.jdbctemp.ipl.service.BatsmanService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BatsmanServiceImpl implements BatsmanService {

    @Autowired
    private Dao<BatsmanModel> dao;

    @Override
    public List<BatsmanModel> getPlayerList(PlayerRequest playerRequest) {
        List<BatsmanModel> playerList = dao.getPlayerList(playerRequest);
        return playerList;
    }
}


import com.jdbctemp.ipl.model.BatsmanModel;
import com.jdbctemp.ipl.payload.PlayerRequest;
import com.jdbctemp.ipl.service.BatsmanService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/batsman")
public class BatsmanController {

    @Autowired
    private BatsmanService batsmanService;

    @GetMapping
    public ResponseEntity<List<BatsmanModel>> getBatsman(@Valid @RequestBody PlayerRequest playerRequest) {
        System.out.println(playerRequest.getPlayer1());
        List<BatsmanModel> playerList = batsmanService.getPlayerList(playerRequest);
        return ResponseEntity.ok(playerList);
    }
}



@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class BowlerModel {
    private String season;
    private String start_date;
    private String venue;
    private String ball;
    private String battingTeam;
    private String bowlingTeam;
    private String striker;
    private String bowler;
    private String runsOffBat;
    private String wickets;

}



@Repository
public class BowlerDao implements Dao<BowlerModel>{

    private final String SQLFIRSTPART = "select bowler, ANY_VALUE(bowling_team) as bowling_team, " +
            "ANY_VALUE(batting_team) as batting_team, ANY_VALUE(venue) as Venue, sum(runs_off_bat) + sum(wides) as runs_off_bat, " +
            "count(ball) as Ball, COUNT(NULLIF(TRIM(wicket_type), '')) as Wickets, ANY_VALUE(season) as Season, " +
            "ANY_VALUE(striker) as Striker, ANY_VALUE(start_date) as start_date from balls where bowler=? ";

    private final String SQLLASTPART = "group by match_id order by ANY_VALUE(start_date) DESC";

    private final String SQLTEAM = "AND batting_team=? ";

    private final String SQLVENUE = "AND venue=? ";

    private final String SQLBATSMAN = "AND striker=? ";

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public BowlerDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public List<BowlerModel> getPlayerList(PlayerRequest playerRequest) {

        RowMapper<BowlerModel> rowMapper =  (rs, rowNum) -> {
            BowlerModel bm = new BowlerModel();
//            balls.setMatch_id(rs.getString("match_id"));
            bm.setBowler(rs.getString("bowler"));
            bm.setBowlingTeam(rs.getString("bowling_team"));
            bm.setBattingTeam(rs.getString("batting_team"));
            bm.setVenue((rs.getString("venue")));
            bm.setRunsOffBat(rs.getString("runs_off_bat"));
            bm.setBall(rs.getString("ball"));
            bm.setWickets(rs.getString("wickets"));
            bm.setSeason(rs.getString("season"));
            if (!playerRequest.getPlayer2().isEmpty())
                bm.setStriker(rs.getString("striker"));
            bm.setStart_date(rs.getString("start_date"));

            return bm;
        };

        List<String> queryArgs = new ArrayList<>();
        String finalSQl = "";

        queryArgs.add(playerRequest.getPlayer1());

        if (!playerRequest.getTeam().isEmpty()) {
            finalSQl = SQLTEAM;
            queryArgs.add(playerRequest.getTeam());
        }

        if (!playerRequest.getVenue().isEmpty()) {
            finalSQl += SQLVENUE;
            queryArgs.add(playerRequest.getVenue());
        }

        if (!playerRequest.getPlayer2().isEmpty()) {
            finalSQl += SQLBATSMAN;
            queryArgs.add(playerRequest.getPlayer2());
        }

        /* this is the part I used from the above stackoverflow question */
        Object[] preparedStatementArgs = new Object[queryArgs.size()];
        for (int i = 0; i < preparedStatementArgs.length; i++) {
            preparedStatementArgs[i] = queryArgs.get(i);
            System.out.println("prepare22: " + preparedStatementArgs[i]);
            System.out.println("queruarhs22: " + queryArgs.get(i));
        }

        finalSQl = SQLFIRSTPART + finalSQl + SQLLASTPART;

        return jdbcTemplate.query(finalSQl, preparedStatementArgs, rowMapper);

//        String sql = "select match_id, bowler, bowling_team from balls where start_date = '2015-04-21' AND striker = 'DA Miller' AND bowling_team = 'Rajasthan Royals' ";
//        return jdbcTemplate.query(finalSQl, rowMapper);
    }
}
